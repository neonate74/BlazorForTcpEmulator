@page "/counter"
@using MauiBlazorApp.Services;
@using Microsoft.Data.SqlClient;

<h1>Connection Counter</h1>

<p role="status">Current Connection: @currentCount</p>

@* <button class="btn btn-primary" @onclick="IncrementCount">Click me</button> *@

<textarea style="margin-top: 10px; border: 1px solid gray; width: 90%;" rows="20">@logString</textarea>

@code {
    private int currentCount = 0;

    private string logString;

    private MainPage mainPage;

    private void IncrementCount()
    {
        currentCount++;
    }

    public class Code
    {
        public string CodeName { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        string modeCommon = App.GetConfigSectionValue("MODECOMMON_ConnectionString");

        using (MODECOMMON.MODECOMMONEntities entities = new MODECOMMON.MODECOMMONEntities())
        {
            try
            {
                List<MODECOMMON.CommonCode> codes = entities.CommonCode.Where(x => x.CodeName.IndexOf("투어마일리지") > -1).OrderBy(x => x.CodeName).ToList().DistinctBy(x => x.CodeName).ToList();
                // MODECOMMON.CommonCode code1 = entities.CommonCode.Single(author => author.CodeName.StartsWith("test"));
                
                foreach (MODECOMMON.CommonCode code in codes)
                {
                    this.logString += code.CodeName + "\r\n";
                }
            }
            catch(Exception ex)
            {
                string msg = ex.Message;
            }
        }

        this.mainPage = (MainPage)App.Current.MainPage;
        this.mainPage.ConnectionChanged += MainPage_ConnectionChanged;
        NotificationService.ServerListenerModule.DataReceived += ServerListenerModule_DataReceived;

        currentCount = mainPage.CurrentConnection;
    }

    private void MainPage_ConnectionChanged(object sender, EventArgs e)
    {
        currentCount = mainPage.CurrentConnection;

        InvokeAsync(StateHasChanged);
    }

    private void ServerListenerModule_DataReceived(object sender, EventArgs e)
    {
        logString += sender.ToString() + "\r\n";

        InvokeAsync(StateHasChanged);
    }
}
